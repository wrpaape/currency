require "minitest/autorun"
require_relative '../lib/currency_trader.rb'
require_relative '../lib/currency_converter.rb'
require_relative '../lib/currency.rb'

CURR_CODES = "USD EUR GBP INR AUD CAD ZAR NZD JPY".split(" ")
CONV_RATES_OLD = "1.00000 0.90867 0.64620 63.4724 1.27968 1.23039 11.8959 1.36916 121.543".split(" ")
CURR_TABLE_OLD = Hash.new
CURR_CODES.each_with_index { |code, ind| CURR_TABLE_OLD[code.to_sym] = CONV_RATES_OLD[ind].to_f }
CONV_RATES_NEW = "1.00000 0.90987 0.64621 63.4940 1.27866 1.22941 11.9071 1.36882 121.552".split(" ")
CURR_TABLE_NEW = Hash.new
CURR_CODES.each_with_index { |code, ind| CURR_TABLE_NEW[code.to_sym] = CONV_RATES_NEW[ind].to_f }

class Currency_trader_test < Minitest::Test
  def setup
    cc_objs = [Currency_converter.new(CURR_TABLE_OLD), Currency_converter.new(CURR_TABLE_NEW)]
    @ct = Currency_trader.new(cc_objs, Currency.new(1000000, "JPY"))

    curr_table_old1 = {LOL: 0.5, IDK: 1.0, WTF: 150.0}
    curr_table_new1 = {LOL: 0.6, IDK: 1.0, WTF: 140.0}
    cc_objs1 = [Currency_converter.new(curr_table_old1), Currency_converter.new(curr_table_new1)]
    @ct_LOL1 = Currency_trader.new(cc_objs1, Currency.new(1000000, "LOL"))
    @ct_IDK1 = Currency_trader.new(cc_objs1, Currency.new(1000000, "IDK"))
    @ct_WTF1 = Currency_trader.new(cc_objs1, Currency.new(1000000, "WTF"))
    @ct_LOL1.best_trades
    @ct_IDK1.best_trades
    @ct_WTF1.best_trades
    curr_table_old2 = {LOL: 0.5, IDK: 1.0, WTF: 150.0}
    curr_table_new2 = {LOL: 0.3, IDK: 1.0, WTF: 140.0}
    cc_objs2 = [Currency_converter.new(curr_table_old2), Currency_converter.new(curr_table_new2)]
    @ct_LOL2 = Currency_trader.new(cc_objs2, Currency.new(1000000, "LOL"))
    @ct_IDK2 = Currency_trader.new(cc_objs2, Currency.new(1000000, "IDK"))
    @ct_WTF2 = Currency_trader.new(cc_objs2, Currency.new(1000000, "WTF"))
    @ct_LOL2.best_trades
    @ct_IDK2.best_trades
    @ct_WTF2.best_trades
    curr_table_old3 = {LOL: 0.5, IDK: 1.0, WTF: 150.0}
    curr_table_new3 = {LOL: 0.8, IDK: 0.7, WTF: 200.0}
    cc_objs3 = [Currency_converter.new(curr_table_old3), Currency_converter.new(curr_table_new3)]
    @ct_LOL3 = Currency_trader.new(cc_objs3, Currency.new(1000000, "LOL"))
    @ct_IDK3 = Currency_trader.new(cc_objs3, Currency.new(1000000, "IDK"))
    @ct_WTF3 = Currency_trader.new(cc_objs3, Currency.new(1000000, "WTF"))
    @ct_LOL3.best_trades
    @ct_IDK3.best_trades
    @ct_WTF3.best_trades

    curr_table0 = {LOL: 1.0, IDK: 0.5, WTF: 3.0, OMG: 100.0 }
    curr_table1 = {LOL: 1.0, IDK: 0.3, WTF: 9.0, OMG: 200.0 }
    curr_table2 = {LOL: 1.0, IDK: 0.1, WTF: 2.0, OMG: 150.0 }
    curr_table3 = {LOL: 1.0, IDK: 0.9, WTF: 1.5, OMG: 50.0 }
    curr_table4 = {LOL: 1.0, IDK: 1.5, WTF: 3.0, OMG: 20.0 }
    curr_table_multi_trade = [curr_table0, curr_table1, curr_table2, curr_table3, curr_table4]
    cc_objs_multi_trade = []
    curr_table_multi_trade.each { |curr_table| cc_objs_multi_trade << Currency_converter.new(curr_table) }
    @ct_mult_trade = Currency_trader.new(cc_objs_multi_trade, Currency.new(100, "LOL"))
  end

  def test_old_and_new_currency_converter_objects_exist
    assert(@ct.cc_objs[0])
    assert(@ct.cc_objs[1])
  end

  def test_best_trades_exists
    assert(@ct.best_trades)
  end

  def test_currency_trader_trades_to_most_appreciating_currency
    assert_equal(:WTF, @ct_LOL1.code_best_trades[0])
    assert_equal(:WTF, @ct_IDK1.code_best_trades[0])
    assert_equal(:WTF, @ct_WTF1.code_best_trades[0])

    assert_equal(:LOL, @ct_LOL2.code_best_trades[0])
    assert_equal(:LOL, @ct_IDK2.code_best_trades[0])
    assert_equal(:LOL, @ct_WTF2.code_best_trades[0])

    assert_equal(:IDK, @ct_LOL3.code_best_trades[0])
    assert_equal(:IDK, @ct_IDK3.code_best_trades[0])
    assert_equal(:IDK, @ct_WTF3.code_best_trades[0])
  end

  def test_currency_trader_returns_proper_value_roi_for_LOLIDKWTF_tables
    assert_equal(1, @ct_LOL1.roi.amount <=> 0)
    assert_equal(1, @ct_IDK1.roi.amount <=> 0)
    assert_equal(0, @ct_WTF1.roi.amount <=> 0)

    assert_equal(0, @ct_LOL2.roi.amount <=> 0)
    assert_equal(1, @ct_IDK2.roi.amount <=> 0)
    assert_equal(1, @ct_WTF2.roi.amount <=> 0)

    assert_equal(1, @ct_LOL3.roi.amount <=> 0)
    assert_equal(0, @ct_IDK3.roi.amount <=> 0)
    assert_equal(1, @ct_WTF3.roi.amount <=> 0)
  end

  def test_currency_trader_returns_best_trades
  end

end
